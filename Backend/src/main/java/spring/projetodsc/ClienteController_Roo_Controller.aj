// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package spring.projetodsc;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;
import spring.projetodsc.ClienteController;
import spring.projetodsc.domain.Cliente;
import spring.projetodsc.service.AdvogadoService;
import spring.projetodsc.service.ClienteService;
import spring.projetodsc.service.ProcessoService;

privileged aspect ClienteController_Roo_Controller {
    
    @Autowired
    ClienteService ClienteController.clienteService;
    
    @Autowired
    AdvogadoService ClienteController.advogadoService;
    
    @Autowired
    ProcessoService ClienteController.processoService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ClienteController.create(@Valid Cliente cliente, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, cliente);
            return "clientes/create";
        }
        uiModel.asMap().clear();
        clienteService.saveCliente(cliente);
        return "redirect:/clientes/" + encodeUrlPathSegment(cliente.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ClienteController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Cliente());
        return "clientes/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String ClienteController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("cliente", clienteService.findCliente(id));
        uiModel.addAttribute("itemId", id);
        return "clientes/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String ClienteController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("clientes", Cliente.findClienteEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) clienteService.countAllClientes() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("clientes", Cliente.findAllClientes(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "clientes/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ClienteController.update(@Valid Cliente cliente, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, cliente);
            return "clientes/update";
        }
        uiModel.asMap().clear();
        clienteService.updateCliente(cliente);
        return "redirect:/clientes/" + encodeUrlPathSegment(cliente.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String ClienteController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, clienteService.findCliente(id));
        return "clientes/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String ClienteController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Cliente cliente = clienteService.findCliente(id);
        clienteService.deleteCliente(cliente);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/clientes";
    }
    
    void ClienteController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("cliente_datanascimento_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void ClienteController.populateEditForm(Model uiModel, Cliente cliente) {
        uiModel.addAttribute("cliente", cliente);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("advogadoes", advogadoService.findAllAdvogadoes());
        uiModel.addAttribute("processoes", processoService.findAllProcessoes());
    }
    
    String ClienteController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
