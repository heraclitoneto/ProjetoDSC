// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package spring.projetodsc.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import spring.projetodsc.domain.Cliente;
import spring.projetodsc.domain.ClienteDataOnDemand;
import spring.projetodsc.service.ClienteService;

privileged aspect ClienteDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ClienteDataOnDemand: @Component;
    
    private Random ClienteDataOnDemand.rnd = new SecureRandom();
    
    private List<Cliente> ClienteDataOnDemand.data;
    
    @Autowired
    ClienteService ClienteDataOnDemand.clienteService;
    
    public Cliente ClienteDataOnDemand.getNewTransientCliente(int index) {
        Cliente obj = new Cliente();
        setDatanascimento(obj, index);
        setEmail(obj, index);
        setEndereco(obj, index);
        setName(obj, index);
        setSexo(obj, index);
        setTelefone(obj, index);
        return obj;
    }
    
    public void ClienteDataOnDemand.setDatanascimento(Cliente obj, int index) {
        Date datanascimento = new Date(new Date().getTime() - 10000000L);
        obj.setDatanascimento(datanascimento);
    }
    
    public void ClienteDataOnDemand.setEmail(Cliente obj, int index) {
        String email = "foo" + index + "@bar.com";
        obj.setEmail(email);
    }
    
    public void ClienteDataOnDemand.setEndereco(Cliente obj, int index) {
        String endereco = "endereco_" + index;
        obj.setEndereco(endereco);
    }
    
    public void ClienteDataOnDemand.setName(Cliente obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void ClienteDataOnDemand.setSexo(Cliente obj, int index) {
        String sexo = "sexo_" + index;
        obj.setSexo(sexo);
    }
    
    public void ClienteDataOnDemand.setTelefone(Cliente obj, int index) {
        String telefone = "telefone_" + index;
        obj.setTelefone(telefone);
    }
    
    public Cliente ClienteDataOnDemand.getSpecificCliente(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Cliente obj = data.get(index);
        Long id = obj.getId();
        return clienteService.findCliente(id);
    }
    
    public Cliente ClienteDataOnDemand.getRandomCliente() {
        init();
        Cliente obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return clienteService.findCliente(id);
    }
    
    public boolean ClienteDataOnDemand.modifyCliente(Cliente obj) {
        return false;
    }
    
    public void ClienteDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = clienteService.findClienteEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Cliente' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Cliente>();
        for (int i = 0; i < 10; i++) {
            Cliente obj = getNewTransientCliente(i);
            try {
                clienteService.saveCliente(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
